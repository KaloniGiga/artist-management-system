import type { Knex } from "knex";

export async function up(knex: Knex): Promise<void> {
  //   await knex.raw(`
  //     CREATE TYPE gender AS ENUM ('m', 'f', 'o');
  //   `);

  await knex.raw(`CREATE TABLE artists (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    dob TIMESTAMP,
    gender gender NOT NULL,
    address VARCHAR(255) NOT NULL,
    first_release_year INT NOT NULL,
    no_of_albums_released INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
     
    ALTER TABLE users ADD COLUMN artist_id int UNIQUE REFERENCES artists(id);
    `);

  await knex.raw(`
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';

    CREATE TRIGGER update_artists_updated_at BEFORE UPDATE
    ON artists FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
  `);
}

export async function down(knex: Knex): Promise<void> {
  await knex.raw(`
    DROP TRIGGER IF EXISTS update_artists_updated_at ON artists;
    DROP FUNCTION IF EXISTS update_updated_at_column cascade;
  `);
  await knex.raw(`DROP TABLE artists cascade`);

  //   await knex.raw(`
  //     DROP TYPE IF EXISTS gender;
  //   `);
}
