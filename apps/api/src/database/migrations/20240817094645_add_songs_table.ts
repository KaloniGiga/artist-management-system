import type { Knex } from "knex";

export async function up(knex: Knex): Promise<void> {
  await knex.raw(`
        CREATE TYPE genre AS ENUM ('rnb', 'country', 'classic', 'rock', 'jazz');
    `);

  await knex.raw(`
      CREATE TABLE songs (
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        album_name VARCHAR(255) NOT NULL,
        genre genre NOT NULL,
        artist_id int REFERENCES artists(id) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

  await knex.raw(`
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';

    CREATE TRIGGER update_songs_updated_at BEFORE UPDATE
    ON songs FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
  `);
}

export async function down(knex: Knex): Promise<void> {
  await knex.raw(`
    DROP TRIGGER IF EXISTS update_songs_updated_at ON songs;
    DROP FUNCTION IF EXISTS update_updated_at_column;
  `);

  await knex.raw(`DROP TABLE songs`);
  await knex.raw(`
        DROP TYPE IF EXISTS genre;
    `);
}
